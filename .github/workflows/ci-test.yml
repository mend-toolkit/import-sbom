name: CI-TEST-import-sbom
on:
  workflow_dispatch:
  push:
    branches:
      - '**'
      - '!ws-iac-scan-results/**'
      - '!whitesource-remediate/master-all**'
      - '!whitesource/**'
    tags:
      - '*'
  schedule:
    - cron: '0 4 * * *'

env:
  APP_NAME: mend_import_sbom

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    outputs:
      python_version: ${{ steps.set_env_vars.outputs.PYTHON_VERSION }}
      min_py_ver: ${{ steps.set_env_vars.outputs.MIN_PY_VER }}
      version: ${{ steps.set_env_vars.outputs.VERSION }}
      release: ${{ steps.set_env_vars.outputs.RELEASE }}
      app_dir: ${{ steps.set_env_vars.outputs.APP_DIR }}
      pkg_name: ${{ steps.set_env_vars.outputs.PKG_NAME }}
      whl_name: ${{ steps.set_env_vars.outputs.WHL_NAME }}
      source_branch: ${{ steps.get_source_branch.outputs.SOURCE_BRANCH }}

    strategy:
      matrix:
        python-version: ['3.9', '3.10' , '3.11']

    steps:
      - name: Set Environment Variables
        id: set_env_vars
        run: |
          pkgVersion=0.0.0.ci0
          pkgRelease=false

          echo "========= GITHUB_OUTPUT ========="
          echo "PYTHON_VERSION=${{ matrix.python-version }}" >> $GITHUB_OUTPUT
          if [[ ${{ strategy.job-index }} == 0 ]]; then
            echo "MIN_PY_VER=${{ matrix.python-version }}" >> $GITHUB_OUTPUT
          fi

          if [[ "$GITHUB_REF" == *"refs/tags/v"* || "$GITHUB_REF" == *"refs/tags/test-v"* ]]; then
            pkgVersion="$(echo ${{ github.ref }} | sed -r 's/^[\/a-zA-z-]+//')"
            if [[ $pkgVersion != *@(a|b)* ]]; then
              pkgRelease=true
            fi
          else
            echo "github.ref: ${{ github.ref }}"
          fi
          
          echo "VERSION=$pkgVersion" >> $GITHUB_OUTPUT
          echo "RELEASE=$pkgRelease" >> $GITHUB_OUTPUT
          echo "APP_DIR=${{ env.APP_NAME }}" >> $GITHUB_OUTPUT
          echo "PKG_NAME=${{ env.APP_NAME }}-${pkgVersion}" >> $GITHUB_OUTPUT
          echo "WHL_NAME=${{ env.APP_NAME }}-${pkgVersion}-py3-none-any.whl" >> $GITHUB_OUTPUT

          echo "========== GITHUB_ENV ==========="
          echo "VERSION=$pkgVersion" >> $GITHUB_ENV
          echo "APP_DIR=${{ env.APP_NAME }}" >> $GITHUB_ENV
      
      - uses: actions/checkout@v3
      - name: Get Source Branch
        id: get_source_branch
        run: |
          echo "SOURCE_BRANCH=$(git branch --contains ${{ github.sha }} | grep -E 'feature|staging' | sed 's/[ *]//g')" >> $GITHUB_OUTPUT
      
      - name: Set Package Version
        id: set_package_version
        run: |
          sed -E -i  "s/^__version__ = \"[a-z0-9\.]+\"/__version__ = \"${{ env.VERSION }}\"/g" "${{ env.APP_DIR }}/_version.py"
          cat "${{ env.APP_DIR }}/_version.py"
      
      - name: Setup Python ${{ matrix.python-version }}
        id: setup_python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install Dependencies
        id: install_dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 wheel -r requirements.txt
      
      - name: Lint with flake8
        id: lint_with_flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --ignore=E501,F841
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Check Unit Test Files
        id: check_test_files
        uses: andstor/file-existence-action@v2
        with:
          files: "*/tests/test_*.py"
          
      - name: Run Tests with pytest
        id: tests_pytest
        if: steps.check_test_files.outputs.files_exists == 'true'
        run: |
          pip install pytest
          pytest

      - name: Unittest
        id: test_unittest
        if: steps.check_test_files.outputs.files_exists == 'true'
        run: python -m unittest

      - name: Create wheel Package
        id: create_whl
        run: python setup.py bdist_wheel

      - name: Install ${{ steps.set_env_vars.outputs.PKG_NAME }}
        id: install_whl
        env:
          WHL_NAME: ${{ steps.set_env_vars.outputs.WHL_NAME }}
        run: pip install "dist/${WHL_NAME}"

      - name: Copy wheel
        id: copy_whl
        env:
          PYTHON_VERSION: ${{ steps.set_env_vars.outputs.PYTHON_VERSION }}
        run: |
          mkdir "dist/${PYTHON_VERSION}"
          cp dist/${{ steps.set_env_vars.outputs.APP_DIR }}-${{ steps.set_env_vars.outputs.VERSION }}-py3-none-any.whl dist/${{ steps.set_env_vars.outputs.PYTHON_VERSION }}/

      - name: Cache wheel
        id: cache_whl
        uses: actions/cache@v3
        with:
          path: dist/${{ steps.set_env_vars.outputs.PYTHON_VERSION }}/${{ steps.set_env_vars.outputs.APP_DIR }}-${{ steps.set_env_vars.outputs.VERSION }}-py3-none-any.whl
          key: ${{ steps.set_env_vars.outputs.PYTHON_VERSION }}_${{ steps.set_env_vars.outputs.APP_DIR }}_${{ github.run_id }}

  publish:
    if: ${{ startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/staging'}}
    needs: [build-and-test]
    runs-on: ubuntu-latest

    steps:
      - name: Restore whl
        uses: actions/cache@v3
        with:
          path: dist/${{needs.build-and-test.outputs.min_py_ver}}/${{needs.build-and-test.outputs.app_dir}}-${{needs.build-and-test.outputs.version}}-py3-none-any.whl
          key: ${{needs.build-and-test.outputs.min_py_ver}}_${{needs.build-and-test.outputs.app_dir}}_${{ github.run_id }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Upload to S3 Bucket
        env:
          AWS_BUCKET: mend-ps-staging
        run: |
          TIMESTAMP=$(date +"%Y-%m-%d_%H-%M")
          echo aws s3 cp dist/${{needs.build-and-test.outputs.min_py_ver}}/${{needs.build-and-test.outputs.app_dir}}-${{needs.build-and-test.outputs.version}}-py3-none-any.whl s3://${AWS_BUCKET}/${{needs.build-and-test.outputs.app_dir}}/"$TIMESTAMP"_${{ env.APP_NAME }}.whl
          echo aws s3api put-object-tagging --bucket "$AWS_BUCKET" --key ${{needs.build-and-test.outputs.app_dir}}/"$TIMESTAMP"_${{ env.APP_NAME }}.whl --tagging "{\"TagSet\": [{\"Key\": \"User\", \"Value\": \"${{ github.actor }}\"},{\"Key\": \"Branch\", \"Value\": \"${{needs.build-and-test.outputs.source_branch}}\"},{\"Key\": \"CommitId\", \"Value\": \"${{ github.sha }}\"}]}"

      - name: Publish to PyPI (Test)
      #   if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "packages_dir: dist/${{ needs.build-and-test.outputs.min_py_ver }}"

      # - name: Publish to PyPI
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     skip_existing: true
      #     user: __token__
      #     password: ${{ secrets.PYPI_API_TOKEN }}
      #     packages_dir: dist/${{ needs.build-and-test.outputs.min_py_ver }}
      
      # - uses: actions/checkout@v3
      # - name: Create Release
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   uses: ncipollo/release-action@v1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     allowUpdates: true
      #     artifacts: dist/${{needs.build-and-test.outputs.min_py_ver}}/${{needs.build-and-test.outputs.app_dir}}-${{needs.build-and-test.outputs.version}}-py3-none-any.whl
      #     prerelease: ${{ needs.build-and-test.outputs.release != 'true' }}
      #     generateReleaseNotes: true
      # - name: Publish to Confluence - Public
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   uses: cupcakearmy/confluence-markdown-sync@v1
      #   with:
      #     from: README.md
      #     to: 2225406280
      #     cloud: whitesource
      #     user: ${{ secrets.CONFLUENCE_USER }}
      #     token: ${{ secrets.CONFLUENCE_TOKEN }}
      # - name: Publish to Confluence - Internal
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   uses: cupcakearmy/confluence-markdown-sync@v1
      #   with:
      #     from: README.md
      #     to: 2313290370
      #     cloud: whitesource
      #     user: ${{ secrets.CONFLUENCE_USER }}
      #     token: ${{ secrets.CONFLUENCE_TOKEN }}
